package types

import (
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

// Hyperchain module sentinel errors
var (
	ErrHyperchainNotFound           = sdkerrors.Register(ModuleName, 1, "hyperchain not found")
	ErrMaxHyperchainsReached        = sdkerrors.Register(ModuleName, 2, "maximum number of hyperchains reached")
	ErrInsufficientDeposit          = sdkerrors.Register(ModuleName, 3, "insufficient deposit")
	ErrAgentNotFound                = sdkerrors.Register(ModuleName, 4, "agent not found")
	ErrHyperchainNotActive          = sdkerrors.Register(ModuleName, 5, "hyperchain not active")
	ErrUnauthorized                 = sdkerrors.Register(ModuleName, 6, "unauthorized")
	ErrValidatorAlreadyExists       = sdkerrors.Register(ModuleName, 7, "validator already exists")
	ErrMaxValidatorsReached         = sdkerrors.Register(ModuleName, 8, "maximum number of validators reached")
	ErrInsufficientStake            = sdkerrors.Register(ModuleName, 9, "insufficient stake")
	ErrValidatorNotFound            = sdkerrors.Register(ModuleName, 10, "validator not found")
	ErrBridgeNotFound               = sdkerrors.Register(ModuleName, 11, "bridge not found")
	ErrMaxBridgesReached            = sdkerrors.Register(ModuleName, 12, "maximum number of bridges reached")
	ErrRelayerAlreadyExists         = sdkerrors.Register(ModuleName, 13, "relayer already exists")
	ErrRelayerNotFound              = sdkerrors.Register(ModuleName, 14, "relayer not found")
	ErrBridgeNotActive              = sdkerrors.Register(ModuleName, 15, "bridge not active")
	ErrUnsupportedToken             = sdkerrors.Register(ModuleName, 16, "unsupported token")
	ErrTransactionNotFound          = sdkerrors.Register(ModuleName, 17, "transaction not found")
	ErrTransactionNotPending        = sdkerrors.Register(ModuleName, 18, "transaction not pending")
	ErrAlreadyApproved              = sdkerrors.Register(ModuleName, 19, "already approved")
	ErrNotValidator                 = sdkerrors.Register(ModuleName, 20, "not a validator")
	ErrInvalidBlockHeight           = sdkerrors.Register(ModuleName, 21, "invalid block height")
	ErrParentBlockNotFound          = sdkerrors.Register(ModuleName, 22, "parent block not found")
	ErrInvalidParentHash            = sdkerrors.Register(ModuleName, 23, "invalid parent hash")
	ErrInvalidPermissionType        = sdkerrors.Register(ModuleName, 24, "invalid permission type")
	ErrPermissionNotFound           = sdkerrors.Register(ModuleName, 25, "permission not found")
	ErrInvalidName                  = sdkerrors.Register(ModuleName, 26, "invalid name")
	ErrInvalidDescription           = sdkerrors.Register(ModuleName, 27, "invalid description")
	ErrInvalidChainType             = sdkerrors.Register(ModuleName, 28, "invalid chain type")
	ErrInvalidConsensusType         = sdkerrors.Register(ModuleName, 29, "invalid consensus type")
	ErrInvalidGenesisConfig         = sdkerrors.Register(ModuleName, 30, "invalid genesis config")
	ErrInvalidChainConfig           = sdkerrors.Register(ModuleName, 31, "invalid chain config")
	ErrInvalidMetadata              = sdkerrors.Register(ModuleName, 32, "invalid metadata")
	ErrInvalidMaxValidators         = sdkerrors.Register(ModuleName, 33, "invalid max validators")
	ErrInvalidMinStake              = sdkerrors.Register(ModuleName, 34, "invalid min stake")
	ErrInvalidSupportedTokens       = sdkerrors.Register(ModuleName, 35, "invalid supported tokens")
	ErrInvalidSupportedModules      = sdkerrors.Register(ModuleName, 36, "invalid supported modules")
	ErrInvalidPubkey                = sdkerrors.Register(ModuleName, 37, "invalid pubkey")
	ErrInvalidMinRelayers           = sdkerrors.Register(ModuleName, 38, "invalid min relayers")
	ErrInvalidExpirationDays        = sdkerrors.Register(ModuleName, 39, "invalid expiration days")
	ErrInvalidSourceTxID            = sdkerrors.Register(ModuleName, 40, "invalid source transaction ID")
)